{"version":3,"sources":["components/Menu.js","components/Pagination.js","components/Mashups.js","components/Approve.js","components/App.js","serviceWorker.js","index.js"],"names":["Menu","className","class","href","Pagination","currentPage","totalPages","paginate","firstPages","lastPages","nearPages","pages","paginatePages","concat","num","enumArray","i","push","generateEnumArray","map","page","key","onClick","calculatePagination","Mashups","mashupList","loading","user","id","publicId","type","name","author","title","Approve","useState","setLoading","setMashupList","totalMashup","setTotalMashup","fetchMeshaps","a","fetch","then","res","json","mashups","data","mashupCount","useEffect","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3fa3c24e.chunk.js","sourcesContent":["import React from 'react';\nimport '../css/Menu.css';\n\nfunction Menu() {\n    return (\n        <ul className=\"menu\">\n            <li className=\"menu__item\">\n                <i class=\"fas fa-check menu__icon\"></i>\n                <a href=\"/\" className=\"menu__link\">Wait accept</a>\n            </li>\n            <li className=\"menu__item\">\n                <i class=\"fas fa-check menu__icon\"></i>\n                <a href=\"/\" className=\"menu__link\">Deny</a>\n            </li>\n            <li className=\"menu__item\">\n                <i class=\"fas fa-check menu__icon\"></i>\n                <a href=\"/\" className=\"menu__link\">Accepted</a>\n            </li>\n            <li className=\"menu__item\">\n                <i class=\"fas fa-check menu__icon\"></i>\n                <a href=\"/\" className=\"menu__link\">Errors</a>\n            </li>\n        </ul>\n    );\n}\n\nexport default Menu;","import React from 'react';\n\nfunction Pagination({ currentPage, totalPages, paginate }) {\n    const firstPages = [1, 2, 3]\n    const lastPages = [totalPages - 2, totalPages - 1, totalPages]\n    const nearPages = [currentPage - 1, currentPage, currentPage + 1]\n    const generateEnumArray = (num) => {\n        let enumArray = []\n        for (let i = 1; i <= num; i++) {\n            enumArray.push(i)\n        }\n        return (enumArray)\n    }\n    const generatePagination = (pages) => {\n        pages.map(page => {\n            if (page !== '...') {\n                return (<li key={page} className='page-item'>\n                    <a onClick={() => paginate(page)} href='!#' className='page-link'>\n                        {page}\n                    </a>\n                </li>)\n            } else {\n                return (<li key={page} className='page-item'>\n                    <a href='!#' className='page-link'>\n                        {page}\n                    </a>\n                </li>)\n            }\n        })\n        return pages\n    }\n    const calculatePagination = () => {\n        let paginatePages = []\n        if (totalPages > 9) {\n            if (currentPage in firstPages || currentPage in lastPages) {\n                paginatePages.concat(firstPages, '...', lastPages)\n            } else {\n                paginatePages.concat(firstPages, '...', nearPages, '...', lastPages)\n            }\n        } else {\n            paginatePages = generateEnumArray(totalPages)\n        }\n        return generatePagination(paginatePages)\n    }\n\n    return (\n        <nav>\n            <ul className='pagination'>\n                {calculatePagination()}\n            </ul>\n        </nav>);\n}\n\n\n\nexport default Pagination","import React, { useEffect, useState } from 'react';\nimport '../css/Mashups.css';\n\nconst Mashups = ({mashupList,loading})=>{\n    if (loading){\n        return(\n            <h2>Loading..</h2>\n        )\n    }\n    return(\n        <table className='mashups'>\n                <thead>\n                    <tr>\n                        <th></th>\n                        <th>Video</th>\n                        <th>Source</th>\n                        <th>Audio</th>\n                    </tr>\n                </thead>\n                <tbody className='mashups__tbody'>\n                    {mashupList.map((user) => (\n                        <tr key={[user.id,user.publicId]}>\n                        <td><input type=\"checkbox\" name=\"\" id=\"\" /></td>\n                        <td>{user.id} {user.publicId}</td>\n                        <td>{user.author}{user.title}</td>\n                        <td><i class=\"fas fa-play\"></i></td>\n                    </tr>\n                    ))}                    \n                </tbody>\n            </table>\n    )\n}\n\nexport default Mashups","import React, { useEffect, useState } from 'react';\nimport '../css/Approve.css';\nimport Paginatrion from './Pagination'\nimport Mashups from './Mashups'\n\nfunction Approve() {\n    const [loading, setLoading] = useState(false);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [mashupList, setMashupList] = useState([])\n    const [totalMashup, setTotalMashup] = useState(0)\n    const fetchMeshaps = async () => {\n        setLoading(true)\n        const mashups = await fetch('mashup?page='+currentPage)\n            .then(res => res.json())\n        setMashupList(mashups.data.currentPage)\n        setTotalMashup(mashups.data.mashupCount)\n        setLoading(false)\n    }\n    useEffect(() => {\n        fetchMeshaps()\n    }, [])\n    return (\n        <div className=\"Approve\">\n            <h2 className=\"approve__header\">Wait for approve</h2>\n            <Mashups mashupList={mashupList} loading={loading}></Mashups>\n            <div className=\"approve__controls\">\n                <button className='button approve__accept'><i class=\"fas fa-check\"></i><span>Approve checked</span></button>\n                <button className='button approve__unmark'><i class=\"fas fa-check\"></i><span>Unmark all</span></button>\n                <button className='button'><i class=\"fas fa-check\"></i><span>Mark all</span></button>\n            </div>\n            <Paginatrion currentPage={currentPage} totalPages={totalMashup}></Paginatrion>\n        </div>\n    );\n}\n\nexport default Approve;","import React from 'react';\nimport Menu from './Menu'\nimport Approve from './Approve'\nimport '../css/App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <i class=\"fas fa-bars\"></i><span class=\"header__text\">Mashup admin panel</span>      \n      </header>\n      <div className=\"container\">\n        <div className=\"main_menu\"><Menu></Menu></div>\n        <main className=\"content\">\n          <Approve></Approve>\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}